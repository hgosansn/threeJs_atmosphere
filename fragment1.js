export class Shader1{static vertexShader="\n    varying vec3 v_Normal;\n    varying vec2 vertexUV;\n\n    varying float noise;\n\n    uniform float scale;\n    uniform sampler2D globeTexture;\n\n    void main() {\n      vertexUV = uv;\n      vec4 noiseTex = texture2D( globeTexture, vertexUV );\n      vec3 grayscale = noiseTex.xyz;\n\n      v_Normal = normalize(normalMatrix * normal);\n\n      vec3 newPosition = position + v_Normal * grayscale * scale;\n\n      // Transform the point with the 3D matrix\n      //vec3 transformed = projectionMatrix * newPosition;\n\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n    }\n  ";static fragmentShader="\n      precision mediump float;\n\n      uniform sampler2D globeTexture;\n      \n      uniform vec3 sphereColor;\n      varying vec2 vertexUV;\n      varying vec3 v_Normal;\n\n      void main() {\n        float intensity = 1.2 - dot(v_Normal, vec3(0.0, 0.0, 1.0));\n        vec3 atmosphere = vec3(0.3, 0.6, 1.2) * pow(intensity, 1.5);\n        gl_FragColor = vec4(atmosphere + texture2D(globeTexture, vertexUV).xyz, 1.0);\n      }\n  "}